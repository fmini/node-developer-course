The module file system is assigned to the variable fs -> 'const fs = require('fs')'

fs.writeFileSync('file.name', 'data to write') creates or overwrites that file

fs.appendFileSync('file.name', 'data to write') adds data to the end of that file

adding \n at the end of the data causes the next addition on a new line

You can link to your own files by providing the relative path ie. require()./fileName.js

Each individual file has it's own scope so variables do not cross file bounderies

You can 'explicitly' export variables from one file to another via module.exports = variable in the sending file

To use the data from module.exports, the receiving file must have const variable = require('relative path to exporting file')

npm init in the root on the terminal is used to add the node package manager (package.json) file to the project

npm packages can be found and npmjs.com and will have an install command to copy. Paste in terminal root.

The install command will add a node_modules folder and a package-lock.json file (do not edit thes) 

This will also add the package you are installing as a dependency in package.json

To use the new package, add const variable = require('packageName') in the main application file

The node-modules folder can be deleted and ignored and can (and should) be recreated on every computer it is downloaded to.
Do this by running npm install at the terminal root (info needed automatically comes from package and package-lock files.

You will want to install some npm packages globally. This is done with the -g flag at the end of the install command.

nodemon is an example of a globally installed package and it will automatically run the code every time you save a file.

nodemon will not show up on package-lock or package files in the project.

start nodemon on a file by typing nodemon fileName.js in terminal. Quit nodemon with ctrl Q in terminal.

Command line arguments can be accessed through the array process.argv and includes the node.js path and 
the path to the executed file. The rest of the itmes in the array were gathered from the terminal.

yargs is an npm argument parser. 1st install yargs, then you can add yargs.command > command, builder, & handler 









